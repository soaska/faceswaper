package main

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
)

// –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /status
func handleStatusCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
	tgUserID := int(update.Message.From.ID)
	tgChatID := update.Message.Chat.ID

	userData, err := getUserInfo(tgUserID)
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %v", err)
	}

	response := fmt.Sprintf(
		"üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"+
			"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\n"+
			"üîë Telegram ID: %d\n"+
			"üí∞ –ú–æ–Ω–µ—Ç—ã: %d\n"+
			"üåÄ –ö—Ä—É–∂–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: %d\n"+
			"üíº –ó–∞–º–µ–Ω—ã –ª–∏—Ü: %d\n\n",
		userData["username"],
		tgUserID,
		int(userData["coins"].(float64)),
		int(userData["circle_count"].(float64)),
		int(userData["face_replace_count"].(float64)),
	)

	activeJobs, err := getActiveJobs(userData["id"].(string), "face_jobs")
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: %v", err)
	}
	if len(activeJobs) > 0 {
		response += "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–º–µ–Ω—ã –ª–∏—Ü:\n"
		for _, job := range activeJobs {
			response += fmt.Sprintf(
				"üîπ –ó–∞–¥–∞—á–∞ ID: %s\n"+
					"   –°—Ç–∞—Ç—É—Å: %s\n"+
					"   –í—Ä–µ–º—è: %s\n"+
					"   –û–±–Ω–æ–≤–ª–µ–Ω–∞: %s\n\n",
				job["id"],
				job["status"],
				job["created"],
				job["updated"],
			)
		}
	} else {
		response += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–º–µ–Ω—ã –ª–∏—Ü.\n"
	}

	activeJobs, err = getActiveJobs(userData["id"].(string), "circle_jobs")
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: %v", err)
	}
	if len(activeJobs) > 0 {
		response += "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–∂–∫–æ–≤:\n"
		for _, job := range activeJobs {
			response += fmt.Sprintf(
				"üîπ –ó–∞–¥–∞—á–∞ ID: %s\n"+
					"   –°—Ç–∞—Ç—É—Å: %s\n"+
					"   –í—Ä–µ–º—è: %s\n"+
					"   –û–±–Ω–æ–≤–ª–µ–Ω–∞: %s\n\n",
				job["id"],
				job["status"],
				job["created"],
				job["updated"],
			)
		}
	}

	msg := tgbotapi.NewMessage(tgChatID, response)
	bot.Send(msg)
	return nil
}

func main() {
	// load variables
	BOT_TOKEN, BOT_DEBUG, BOT_ENDPOINT := LoadEnvironment()

	// auth pocketbase
	err := authenticatePocketBase()
	if err != nil {
		panic(err)
	}

	// start the bot
	bot, err := tgbotapi.NewBotAPIWithAPIEndpoint(BOT_TOKEN, BOT_ENDPOINT+`/bot%s/%s`)
	if err != nil {
		panic(err)
	} else {
		log.Printf("Authorized on account %s", bot.Self.UserName)
	}
	if BOT_DEBUG {
		bot.Debug = true
		log.Print("bot in DEBUG mode")
	}

	// updates on telegram API
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	var tempFaceFileID string // media tmp

	updates := bot.GetUpdatesChan(u)
	for update := range updates {
		if update.Message == nil {
			continue
		}

		userID := update.Message.From.ID
		userName := update.Message.From.UserName

		pbUserID, err := getOrCreateUser(int(userID), userName)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			continue
		}

		// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if update.Message.Text != "" && strings.Contains(strings.ToLower(update.Message.Text), "start") {
			greeting := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–ø—Ä–∞–≤–∫–∞: /help", userName)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, greeting)
			bot.Send(msg)
			continue
		}

		// help
		if update.Message.Text != "" && strings.Contains(strings.ToLower(update.Message.Text), "help") {
			helpMessage := "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–º–µ–Ω–µ –ª–∏—Ü–∞. –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–∂–æ—á–∫–∞."
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpMessage)
			bot.Send(msg)
			continue
		}

		// status
		if update.Message.Text != "" && strings.Contains(strings.ToLower(update.Message.Text), "status") {
			err = handleStatusCommand(bot, update)
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err))
				bot.Send(msg)
				continue
			}

			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
		if update.Message.Photo != nil {
			// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ Photo
			fileID := update.Message.Photo[len(update.Message.Photo)-1].FileID
			tempFaceFileID = fileID // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –≤–∏–¥–µ–æ

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∏—Ü–∞.")
			// –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
			cancelMarkup := tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"),
				),
			)
			msg.ReplyMarkup = cancelMarkup
			bot.Send(msg)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ
		if update.Message.Video != nil {
			// –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
			videoFileID := update.Message.Video.FileID

			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —ç—Ç–æ–≥–æ
			if tempFaceFileID != "" {
				err, JobID := createFaceJob(bot, pbUserID, videoFileID, tempFaceFileID)
				if err != nil {
					log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–∞–º–µ–Ω—É –ª–∏—Ü–∞: %v", err)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: %v", err))
					bot.Send(msg)
					continue
				}

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í–∞—à–µ –≤–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°—Ç–∞—Ç—É—Å: –í –æ—á–µ—Ä–µ–¥–∏. ID: %s.", JobID))
				bot.Send(msg)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
				tempFaceFileID = ""
				videoFileID = ""
				continue
			} else {
				err, JobID := createCircleJob(bot, pbUserID, videoFileID)
				if err != nil {
					log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–∂–æ—á–∫–∞: %v", err)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: %v", err))
					bot.Send(msg)
					continue
				}

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í–∞—à–µ –≤–∏–¥–µ–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°—Ç–∞—Ç—É—Å: –í –æ—á–µ—Ä–µ–¥–∏. ID: %s.", JobID))
				bot.Send(msg)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
				tempFaceFileID = ""
				videoFileID = ""
				continue
			}
		}

		// –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
		if update.Message.Text == "–û—Ç–º–µ–Ω–∏—Ç—å" {
			tempFaceFileID = "" // –û–±–Ω—É–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
			bot.Send(msg)
			continue
		}
	}
}
